# -*- coding: utf-8 -*-
"""
This code is used to generate the mst(minimum spanning tree) of the graph.

For a complete graph, the mst is a subgraph which keeps many attributes of 
the origin graph and has ability to resist some noise. Therefore, the mst is 
generated for a rough search. That's why the sum of the AD(angular distance) 
in the mst is calculated.

Written in 2020.01.26, revised in 2022.12.06
by YouZhiyuan
"""

# CN: CatalogNumber
# VM: VisualMagnitude
# RA: RightAscension
# Dec:  Declination
# AD: angular distance
# vx,vy,vz: unit vector generated by RA & Dec or pixel coordinate
# x,y: the project coordinate
# M: matrix
# mst: minimum spanning tree(only in this code, in other code may mean maximum spanning tree)
# R: Radius
# Wid: width
# _adj: adjacency
# _diag: diagonal
# _l: line
# _ms: main star
# _ns: neighbor star
# _s: star
# _thre: threshold


def gen_mst(graph):
    M_adj = graph["M_adj"]
    num_star = M_adj.shape[0]

    # Kruskal algorithm to generate the minimum spanning tree
    # generate the edge list
    # format:
    # edge weight(AD_s1_s2), vertex1(s1), vertex2(s2)
    edge_list = []
    for i_s1 in range(num_star):
        for i_s2 in range(i_s1 + 1, num_star):
            AD_s1_s2 = M_adj[i_s1][i_s2]
            assert AD_s1_s2 >= 0
            edge_list.append((AD_s1_s2, i_s1, i_s2))
    # sort the edge according to the AD
    edge_list.sort(key=lambda edge: edge[0])
    # construct the subgraph list, originally, each vertex is a graph
    subgraph_list = [[i] for i in range(num_star)]

    # generate the mst
    mst = []
    for edge in edge_list:
        for i_sub in range(len(subgraph_list)):
            if edge[1] in subgraph_list[i_sub]:
                i_sub1 = i_sub
            if edge[2] in subgraph_list[i_sub]:
                i_sub2 = i_sub

        # only when 2 vertex belong to different subgraphs, append.
        if not i_sub1 == i_sub2:
            mst.append(edge)
            # update the subgraph list
            subgraph_list[i_sub1] = subgraph_list[i_sub1] + subgraph_list[i_sub2]
            subgraph_list[i_sub2] = []

    AD_sum_mst = sum([edge_mst[0] for edge_mst in mst])
    graph["AD_sum_mst"] = AD_sum_mst
    return graph, mst
