# -*- coding: utf-8 -*-
"""
This code is used to 

Written in 2020.04.13, revised in 2022.12.06
By Zhiyuan You
"""

import cv2
import glob
import joblib
import numpy as np
import os

from easydict import EasyDict

from utils.database.select_R_AD_helper import select_R_AD
from utils.database.graph_helper import gen_graph
from utils.common.mst_helper import gen_mst
from utils.database.k_vector_helper import gen_k_vertor
from utils.vis_helper import vis_lines, vis_graph, vis_mst


# CN: Catalog Number
# VM: Visual Magnitude
# RA: Right Ascension
# Dec: Declination
# AD: Angular Distance
# vx,vy,vz: unit vector generated by RA & Dec or pixel coordinate
# x,y: the project coordinate
# _ms: main star
# _ns: neighbor star
# _thre: threshold
# _1s: one star
# _2s: double star


def gen_database(filepaths, para, visualization=True):
    graph_list = []
    for filepath in filepaths:
        with open(filepath) as fr:
            lines = fr.readlines()
            CN_ms = lines[0].strip().split()[0]
        print(f"Handling star {CN_ms}")

        # select R
        lines_out = select_R_AD(lines, para)
        if visualization:
            img_path = os.path.join(database_pic_R_dir, str(CN_ms) + ".jpg")
            img = vis_lines(lines_out, para)
            cv2.imwrite(img_path, img)
        print(f"Successfully select radius AD for {CN_ms}")

        # generate graph
        graph, CN_list, XY_list = gen_graph(lines_out)
        if visualization:
            img = vis_graph(CN_list, XY_list, para)
            img_path = os.path.join(database_pic_graph_dir, str(CN_ms) + ".jpg")
            cv2.imwrite(img_path, img)
        print(f"Successfully generate graph for {CN_ms}")

        # generate mst
        graph, mst = gen_mst(graph)
        graph_list.append(graph)
        if visualization:
            img = vis_mst(mst, XY_list, para)
            img_path = os.path.join(database_pic_mst_dir, str(CN_ms) + ".jpg")
            cv2.imwrite(img_path, img)
        print(f"Successfully generate mst for {CN_ms}")

    # sort & save graph_list
    graph_list = sorted(graph_list, key=lambda e: e["AD_sum_mst"])
    joblib.dump(graph_list, "./database/graph_list.pkl")

    # gen k_vector for rough search
    k_vector, q, m = gen_k_vertor(graph_list, para)
    joblib.dump([k_vector, q, m], "./database/k_vector_q_m.pkl")


if __name__ == "__main__":
    # simulation parameter
    para = EasyDict({})
    para.R_AD = 6  # Radius of angular distance
    para.AD_2s_thre = 0.19  # AD threshold for 2 star systme
    para.FOV_x = 20  # FOV
    para.FOV_y = 20
    para.FOV_max = np.sqrt((para.FOV_x / 2) ** 2 + (para.FOV_y / 2) ** 2)
    para.N_x = 1024  # resolution
    para.N_y = 1024
    para.VM_thre = 6.0
    para.R_max = 5
    para.Color = (255, 255, 255)

    # graph
    para.Color_s = (0, 0, 0)
    para.Color_l = (0, 0, 0)
    para.Wid_l = 1
    para.Wid_s = -1  # -1: filled
    para.R_s = 5  # the graph vextex radius

    # the relative machine error in k-vector paper
    para.epsilon_machine = 2.22e-16

    # save the image in R_AD
    database_pic_R_dir = "./database/pic_star_image_R"
    os.makedirs(database_pic_R_dir, exist_ok=True)

    # save the graph image
    database_pic_graph_dir = "./database/pic_star_image_graph"
    os.makedirs(database_pic_graph_dir, exist_ok=True)

    # save the mst image
    database_pic_mst_dir = "./database/pic_star_image_mst"
    os.makedirs(database_pic_mst_dir, exist_ok=True)

    database_txt_dir = "./database/txt_star_image"
    filepaths = glob.glob(os.path.join(database_txt_dir, "*.txt"))

    gen_database(filepaths, para)
